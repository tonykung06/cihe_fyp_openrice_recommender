# Generated by Django 3.0.3 on 2024-04-27 08:23

import datetime
import os

import ndjson
from django.db import migrations

from openrice_recommender_app.settings import BASE_DIR


def get_restaurant_id(restaurantWebpageUrl):
    slug = restaurantWebpageUrl.split("/")[-1]
    restaurant_id = slug.split("-")[-1].replace("r", "")
    if not restaurant_id:
        return 0
    return int(restaurant_id)


def get_user_id(user_id):
    return str(user_id).split("userid=")[-1]


def convert_to_date(date_str):
    if not date_str:
        return None
    try:
        return datetime.date.fromisoformat(date_str)
    except ValueError:
        return None


def prepare_model_objects(User, Review, Restaurant, District):
    users = []
    reviews = []
    print("\nstarting users and restaurant_reviews import!")

    # Streaming lines from ndjson file:
    with open(
        os.path.join(BASE_DIR, "./restaurant_reviews/data/restaurantReviews.ndjson")
    ) as f:
        reader = ndjson.reader(f)

        for restaurant_reviews in reader:
            restaurant = restaurant_reviews.get("restaurant", {})
            if not restaurant:
                continue

            restaurant_id = get_restaurant_id(
                restaurant.get("restaurantWebpageUrl", "")
            )
            if not restaurant_id:
                continue

            district = None
            district_name = restaurant.get("restaurantDistrict", "")
            if district_name:
                try:
                    district = District.objects.get(name=district_name)
                except District.DoesNotExist:
                    district = None

            restaurant, _ = Restaurant.objects.get_or_create(
                id=restaurant_id,
                defaults={
                    "name": restaurant.get("restaurantName", "")
                    or restaurant.get("restaurantName2", ""),
                    "address": restaurant.get("restaurantAddress", ""),
                    "image_url": "https://static6.orstatic.com/images/v5/default_inbox_poiphotolv.png?13",
                    "district_id": district.id if district else None,
                },
            )

            review_records = restaurant_reviews.get("restaurantReviews", [])
            if not review_records:
                continue

            for review_record in review_records:
                print(".", end="", flush=True)

                user_id = get_user_id(review_record.get("userId", ""))
                if not user_id:
                    continue

                user = User(
                    id=user_id,
                    name=review_record.get("userName", ""),
                    user_level=review_record.get("userLevel", ""),
                )
                if user not in users:
                    users.append(user)

                review = Review(
                    user=user,
                    restaurant=restaurant,
                    rating_taste=review_record.get("taste", 0),
                    rating_decor=review_record.get("decor", 0),
                    rating_service=review_record.get("service", 0),
                    rating_hygiene=review_record.get("hygiene", 0),
                    rating_value=review_record.get("value", 0),
                    dining_method=review_record.get("diningMethod", ""),
                    review_date=convert_to_date(review_record.get("reviewDate", "")),
                    date_of_visit=convert_to_date(review_record.get("dateOfVisit", "")),
                    spending_per_head=review_record.get("spendingPerHead", ""),
                    title=review_record.get("reviewTitle", ""),
                    comment=review_record.get("reviewComment", ""),
                )

                reviews.append(review)

    return users, reviews


def import_users_and_restaurant_reviews(apps, schema_editor):
    User = apps.get_model("restaurant_reviews", "User")
    Review = apps.get_model("restaurant_reviews", "Review")
    Restaurant = apps.get_model("restaurant_reviews", "Restaurant")
    District = apps.get_model("restaurant_reviews", "District")

    db_alias = schema_editor.connection.alias
    users, reviews = prepare_model_objects(User, Review, Restaurant, District)

    User.objects.using(db_alias).bulk_create(users)
    Review.objects.using(db_alias).bulk_create(reviews)


def truncate_users_and_restaurant_reviews(apps, schema_editor):
    User = apps.get_model("restaurant_reviews", "User")
    Review = apps.get_model("restaurant_reviews", "Review")

    db_alias = schema_editor.connection.alias
    User.objects.using(db_alias).all().delete()
    Review.objects.using(db_alias).all().delete()
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("restaurant_reviews", "0003_auto_20240427_1735"),
    ]

    operations = [
        # migrations.RunPython(
        #     import_users_and_restaurant_reviews, truncate_users_and_restaurant_reviews
        # ),
        migrations.RunPython(migrations.RunPython.noop, migrations.RunPython.noop),
    ]
